name: Backend Testing

on:
  pull_request

jobs:
  backend-build:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch submodules
        run: git submodule update --init --recursive

      - name: Build backend
        working-directory: backend
        run: |
          cmake -S . -B build
          cmake --build build --target backend

  collect_dirs:
    runs-on: ubuntu-latest
    outputs:
      dirs: ${{ steps.dirs.outputs.dirs }}
    steps:
      - uses: actions/checkout@v2
      - id: dirs
        run: echo "dirs=$(find backend -mindepth 1 -maxdepth 1 -type d -printf '%f\n' | jq --raw-input --slurp --compact-output 'split("\n")[:-1]')" >> $GITHUB_OUTPUT
      - name: show found directories
        run: echo ${{ steps.dirs.outputs.dirs }}

  backend-tests:
    needs:
      - backend-build
      - collect_dirs
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        backend-directory: ${{ fromJson(needs.collect_dirs.outputs.dirs) }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Fetch submodules
        run: git submodule update --init --recursive

      - name: Build tests target
        working-directory: backend/${{ matrix.backend-directory }}
        if: ${{ matrix.backend-directory != 'payloads'}}
        run: |
          cmake -S . -B build -DOSMIUM_TESTS_ENABLED=ON
          cmake --build build --target backend-${{ matrix.backend-directory }}-tests

      - name: Run unit tests (linux)
        working-directory: backend/${{ matrix.backend-directory }}
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.backend-directory != 'payloads' }}
        run: |
          cd build/tests
          if [ -f backend-${{ matrix.backend-directory }}-unit-tests ]; then
            ./backend-${{ matrix.backend-directory }}-unit-tests
          else
            echo "No unit tests found for backend-${{ matrix.backend-directory }}-unit-tests"
          fi

      - name: Run unit tests (windows)
        working-directory: backend/${{ matrix.backend-directory }}
        if: ${{ matrix.os == 'windows-latest' && matrix.backend-directory != 'payloads' }}
        run: |
          cd build/tests
          dir
          if exist backend-${{ matrix.backend-directory }}-unit-tests.exe (
            .\backend-${{ matrix.backend-directory }}-unit-tests.exe
          ) else (
            echo "No unit tests found for backend-${{ matrix.backend-directory }}-unit-tests"
          )

      - name: Run end-to-end tests (linux)
        working-directory: backend/${{ matrix.backend-directory }}
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.backend-directory != 'payloads' }}
        run: |
            cd build/tests
            ./backend-${{ matrix.backend-directory }}-e2e-tests

      - name: Run end-to-end tests (windows)
        working-directory: backend/${{ matrix.backend-directory }}
        if: ${{ matrix.os == 'windows-latest' && matrix.backend-directory != 'core' && matrix.backend-directory != 'payloads' }}
        run: |
            cd build/tests
            dir
            .\backend-${{ matrix.backend-directory }}-e2e-tests.exe

  #style-check:
  #  needs:
  #    - backend-build
  #    - collect_dirs
  #  strategy:
  #    fail-fast: false
  #    matrix:
  #      os: [ubuntu-latest]
  #      backend-directory: ${{ fromJson(needs.collect_dirs.outputs.dirs) }}
  #  runs-on: ${{ matrix.os }}
  #  steps:
  #    - name: Checkout code
  #      uses: actions/checkout@v2
  #
  #    - uses: cpp-linter/cpp-linter-action@v2
  #      id: linter
  #      env:
  #        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #      with:
  #        style: file
  #        repo-root: backend/${{ matrix.backend-directory }}
  #        thread-comments: true
  #        ignore: "tests"
  #        extra-args: "-Iinclude"
  #
  #    - name: Check linter result
  #      if: steps.linter.outputs.checks-failed > 0
  #      run: echo "Some files failed the linting checks!"
